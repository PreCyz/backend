apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
group = 'backend'
def artifactName = 'SolBackend'
version = ''

sourceCompatibility = 1.8 /** kompilujemy w Java 8 */
compileJava.options.encoding = 'UTF-8' /** Kodowanie plików źródłowych Java */


/** konfiguracja pozwalająca na uruchomienie skryptu na maszynie nie posiadającej zainstalowanego gradle */
task wrapper(type: Wrapper) {
	gradleVersion = '2.7'
}

/**def artifactoryURL = 'http://plwadev2.skandia.pl:8081/artifactory/libs-release'
repositories {
	maven {
		url "$artifactoryURL"
	}
} */

repositories {
	mavenCentral()
}

def tomcatHome = '/opt/tomcat'
def tomcatLibs = ''
def tomcatWebapps = ''
if (project.hasProperty('tomcatHome')) {
	tomcatLibs    = project.tomcatHome + "/lib"
	tomcatWebapps = project.tomcatHome + "/webapps"
} else {
	if (tomcatHome != null) {
		tomcatLibs    = tomcatHome + "/lib"
		tomcatWebapps = tomcatHome + "/webapps"
	} else {
		println ("""
				|!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				|!!!Required variable tomcatHome is not set                                        !!!
				|!!!Please create file gradle.properties in "gradle user home" folder              !!!
				|!!!""".stripMargin() + gradle.getStartParameter().getGradleUserHomeDir() + """ with content:
				|!!!tomcat_sol_lib_location=location of your Tomcat/lib folder                     
				|!!!                                                                               
				|!!!To "check gradle user" home location run: gradle --debug                       !!!
				|!!!Folder location is in one of the first lines.                                  !!!
				|!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				|""".stripMargin())
		}
}

task checkTomcatHomeSet << {
	if (!project.hasProperty('tomcatHome') && tomcatHome == null) {
		throw new GradleException('Required variable tomcatHome is not set')
	}
}


compileJava.dependsOn checkTomcatHomeSet

dependencies {
	/*
	providedCompile 'org.apache.tomcat:tomcat-jdbc:8.5.0'
	providedCompile 'org.apache.tomcat:tomcat-catalina:8.5.0'
	providedCompile 'com.mchange:c3p0:0.9.5.2'
	providedCompile 'com.oracle:ojdbc14:10.2.0.4.0'
	providedCompile 'c3p0:c3p0-oracle-thin-extras:0.9.0.2'
	providedCompile 'org.hsqldb:hsqldb:2.3.3'
	*/

	providedCompile fileTree(tomcatLibs)

	compile 'aopalliance:aopalliance:1.0'
	compile 'org.aspectj:aspectjrt:1.8.9'
	compile 'org.aspectj:aspectjweaver:1.8.9'
	
	compile 'commons-beanutils:commons-beanutils:1.9.2'
	compile 'commons-dbutils:commons-dbutils:1.6'
	compile 'commons-io:commons-io:2.4'
	compile 'commons-logging:commons-logging:1.2'

	compile 'org.apache.commons:commons-dbcp2:2.1.1'
	compile 'org.apache.commons:commons-lang3:3.4'
	compile 'org.apache.commons:commons-pool2:2.4.2'

	compile 'org.apache.cxf:cxf-core:3.1.3'
	compile 'org.apache.cxf:cxf-rt-bindings-soap:3.1.3'
	compile 'org.apache.cxf:cxf-rt-bindings-xml:3.1.3'
	compile 'org.apache.cxf:cxf-rt-databinding-jaxb:3.1.3'
	compile 'org.apache.cxf:cxf-rt-frontend-jaxrs:3.1.3'
	compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.3'
	compile 'org.apache.cxf:cxf-rt-frontend-simple:3.1.3'
	compile 'org.apache.cxf:cxf-rt-rs-client:3.1.3'
	compile 'org.apache.cxf:cxf-rt-transports-http:3.1.3'
	compile 'org.apache.cxf:cxf-rt-ws-addr:3.1.3'	
	compile 'org.apache.cxf:cxf-rt-ws-policy:3.1.3'
	compile 'org.apache.cxf:cxf-rt-wsdl:3.1.3'
	
	compile 'org.apache.neethi:neethi:3.0.3'
	compile 'org.apache.ws.xmlschema:xmlschema-core:2.2.1'
	
	compile 'mysql:mysql-connector-java:6.0.5'

	compile 'org.eclipse.persistence:eclipselink:2.6.3'
	compile 'org.eclipse.persistence:org.eclipse.persistence.core:2.6.3'
	compile 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.6.3'
	compile 'org.eclipse.persistence:javax.persistence:2.1.1'
	compile 'org.eclipse.persistence:commonj.sdo:2.1.1'
	
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.0'
	compile 'com.fasterxml.jackson.core:jackson-core:2.7.0'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0'
	compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.7.0'
	compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.0'
	compile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.7.0'

	compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
	compile 'javax.ws.rs:jsr311-api:1.1.1'
	compile 'javax.json:javax.json-api:1.0'
	compile 'javax.mail:javax.mail-api:1.5.5'
	compile 'javax.validation:validation-api:1.1.0.Final'
	compile 'javax.servlet:javax.servlet-api:3.1.0'

	compile 'org.springframework:spring-aop:4.2.2.RELEASE'
	compile 'org.springframework:spring-beans:4.2.2.RELEASE'
	compile 'org.springframework:spring-context:4.2.2.RELEASE'
	compile 'org.springframework:spring-core:4.2.2.RELEASE'
	compile 'org.springframework:spring-expression:4.2.2.RELEASE'
	compile 'org.springframework:spring-jdbc:4.2.2.RELEASE'
	compile 'org.springframework:spring-orm:4.2.2.RELEASE'
	compile 'org.springframework.security:spring-security-core:4.0.2.RELEASE'
	compile 'org.springframework:spring-test:4.2.2.RELEASE'
	compile 'org.springframework:spring-tx:4.2.2.RELEASE'
	compile 'org.springframework:spring-web:4.2.2.RELEASE'
	compile 'org.springframework.data:spring-data-jpa:1.11.0.RELEASE'

	compile 'org.slf4j:slf4j-api:1.7.12'
	compile 'org.slf4j:slf4j-log4j12:1.7.12'

	compile 'log4j:log4j:1.2.17'
	
	compile 'org.codehaus.woodstox:stax2-api:3.1.4'
	compile 'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
	
	compile 'org.dom4j:dom4j:2.0.0'
	compile 'org.glassfish:javax.json:1.0.4'
	
	compile 'wsdl4j:wsdl4j:1.6.3'
	
	compile 'junit:junit:4.12'
	compile 'org.mockito:mockito-all:1.10.19'
	compile 'org.hamcrest:hamcrest-all:1.3'
	
	testCompile 'junit:junit:4.12'
	testCompile 'org.mockito:mockito-all:1.10.19'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	
}

/** configuration of JPA for eclipse project */
def configureJPAForEclipse() {
	File prefsFile = file('.settings/org.eclipse.jpt.core.prefs')
	prefsFile.parentFile.mkdirs()
	prefsFile.write('eclipse.preferences.version=1\n')
	prefsFile.append('org.eclipse.jpt.core.platform=eclipselink2_5')
	def writer = new StringWriter()
	def xml = new groovy.xml.MarkupBuilder(writer)
	xml.root() {
		facet(id:'jpt.jpa') {
			node(name:'libprov') {
				attribute(name:'provider-id', value:'jpa-no-op-library-provider')
			}
	   }
	}
	prefsFile = file('.settings/org.eclipse.wst.common.project.facet.core.prefs.xml')
	prefsFile.write(writer.toString());
}

eclipse {

	project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
	}
	
    wtp {
    	facet {
    		facet name: 'jst.web', version: '3.1'
            facet name: 'jst.java', version: '1.8'
            facet name: 'jpt.jpa', version:'2.1'
    	}
    	component {
    		resource deployPath: '/', sourcePath: '/WebContent'
    	}
		
		configureJPAForEclipse()
    }
}

/** ustawienie kodowania */
eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=UTF-8')
}

task createApplicationProperties << {
	def applicationProperties = new File("$buildDir/application.properties")
	
	Properties props = new Properties()
	props.setProperty('applicationVersion', new Date().format("yyyyMMdd"));
	props.setProperty('buildTime', new Date().format("yyyy-MM-dd HH:mm:ss"));
	props.store(applicationProperties.newWriter(), null)
}

war {
	dependsOn createApplicationProperties
	
	from fileTree('WebContent')
	
	from(buildDir) {
		include 'application.properties'
		into('WEB-INF/classes')
	}
}

cleanEclipse << {
    new File('.settings').deleteDir()
	new File('bin').deleteDir()
	new File('build').deleteDir()
	
	File f = file('.project')
	f.delete()
	f = file('.classpath')
	f.delete()
}

/** Możemy ustawić by po zbudowaniu foldery tymczasowe były czyszczone */
assemble.finalizedBy(clean)
